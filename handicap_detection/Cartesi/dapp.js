import { createApp } from "@deroll/app";
import { encodeFunctionData, getAddress, hexToString } from "viem";
import storageContractAbi from "./storageABI.json";
import nftContractAbi from "./simpleNftABI.json";

let storage_contract_address = "";
let nft_contract_address = "";

// Create the application
const app = createApp({
  url: process.env.ROLLUP_HTTP_SERVER_URL || "http://127.0.0.1:5004",
});

// Handle input encoded in hex
app.addAdvanceHandler(async ({ metadata, payload }) => {
  const payloadString = hexToString(payload);
  console.log("Payload:", payloadString);

  let jsonPayload;
  try {
    jsonPayload = JSON.parse(payloadString);
  } catch (error) {
    console.error("Invalid JSON payload:", payloadString);
    return "reject";
  }

  const sender = metadata.msg_sender;
  console.log("Sender:", sender);

  switch (jsonPayload.method) {
    case "set_address":
      storage_contract_address = getAddress(jsonPayload.address);
      console.log("Address is now set:", storage_contract_address);
      break;

    case "generate_number":
      const generatedNumber = jsonPayload.number * 2;
      console.log("Number generated by Cartesi backend:", generatedNumber);

      const callData = encodeFunctionData({
        abi: storageContractAbi,
        functionName: "store",
        args: [generatedNumber],
      });

      app.createVoucher({
        destination: storage_contract_address,
        payload: callData,
      });
      break;

    case "mint_nft":
      const callDataMint = encodeFunctionData({
        abi: nftContractAbi,
        functionName: "mintTo",
        args: [sender],
      });

      app.createVoucher({
        destination: nft_contract_address,
        payload: callDataMint,
      });
      break;

    case "read_data":
      const callDataRead = encodeFunctionData({
        abi: storageContractAbi,
        functionName: "retrieve",
        args: [],
      });

      const voucher = await app.createVoucher({
        destination: storage_contract_address,
        payload: callDataRead,
      });

      const result = await app.inspect(voucher.id);
      return result;

    default:
      console.error("Unknown method:", jsonPayload.method);
      return "reject";
  }

  return "accept";
});
